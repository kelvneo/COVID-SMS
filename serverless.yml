# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: covid
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs12.x
  environment:
    DYNAMODB_MASTER_TABLE: ${self:service}-master-${opt:stage, self:provider.stage}
    DYNAMODB_SWAB_TABLE: ${self:service}-swab-${opt:stage, self:provider.stage}
    DYNAMODB_APPOINTMENT_TABLE: ${self:service}-appointment-${opt:stage, self:provider.stage}
    DYNAMODB_WILDCARD_TABLE: ${self:service}-*-${opt:stage, self:provider.stage}
    COMMZGATE_API_ID: ${env:COMMZGATE_API_ID}
    COMMZGATE_API_PASSWORD: ${env:COMMZGATE_API_PASSWORD}
    DROPBOX_ACCESS_CODE: ${env:DROPBOX_ACCESS_CODE}
    DROPBOX_MASTER_JSON: ${env:DROPBOX_MASTER_JSON}
    DROPBOX_SWAB_JSON_FOLDER: ${env:DROPBOX_SWAB_JSON_FOLDER}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_WILDCARD_TABLE}"

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  # blast2000Swab:
  #   handler: swabs/dropbox.blast2000
  #   events:
  #     - schedule: cron(0 12 ? * * *)

  # blast1000Swab:
  #   handler: swabs/dropbox.blast1000
  #   events:
  #     - schedule: cron(0 2 ? * * *)

  # updateMaster:
  #   handler: master/update.update
  #   events:
  #     - http:
  #         path: master
  #         method: post
  #         cors: true

  # updateDropboxMaster:
  #   handler: master/update.dropbox
  #   events:
  #     - schedule: cron(45 0 ? * * *)

  blastMaster:
    handler: master/dropbox.blast
    events:
      - schedule: cron(0 0 ? * * *)
      - schedule: cron(0 5 ? * * *)
  generalDropboxBlast:
    handler: general/dropbox.blast

  # blastMaster:
  #   handler: master/blast.blast
  #   events:
  #     - schedule: cron(0 1 ? * * *)
  
  # updateSwab:
  #   handler: swabs/update.update
  #   events:
  #     - http:
  #         path: swab/{blastTime}
  #         method: post
  #         cors: true

  # updateDropbox2000Swab:
  #   handler: swabs/update.dropbox2000
  #   events:
  #     - schedule: cron(50 11 ? * * *)

  # updateDropbox1000Swab:
  #   handler: swabs/update.dropbox1000
  #   events:
  #     - schedule: cron(50 1 ? * * *)

  # blast2000Swab:
  #   handler: swabs/blast.blast2000
  #   events:
  #     - schedule: cron(0 12 ? * * *)

  # blast1000Swab:
  #   handler: swabs/blast.blast1000
  #   events:
  #     - schedule: cron(0 2 ? * * *)

  dropboxTest:
    handler: dropbox.fetch

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"

resources:
  Resources:
    MasterDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: N
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_MASTER_TABLE}
    SwabDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_SWAB_TABLE}
    AppointmentDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: N
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_APPOINTMENT_TABLE}
